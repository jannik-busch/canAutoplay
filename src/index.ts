const BASE64_VIDEO = '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';

const DEFAULT_OPTIONS = { 
  useCachedResult: false, 
  useCachedResultIfTrue: false,
  useCachedResultIfFalse: false,
};

type CanAutoplayOptions = {
  useCachedResult?: boolean;
  useCachedResultIfTrue?: boolean;
  useCachedResultIfFalse?: boolean;
};

let cachedResult: boolean | null = null;

export async function canAutoplay(options: CanAutoplayOptions = DEFAULT_OPTIONS): Promise<boolean> {
  if (options.useCachedResult && cachedResult !== null) return cachedResult;
  if (options.useCachedResultIfTrue && cachedResult === true) return true;
  if (options.useCachedResultIfFalse && cachedResult === false) return false;

  const video = document.createElement('video');
  if (!video) {
    console.error('Unexpected error: Failed to create a video element. This should not occur in a standard browser environment. Please check for severe resource constraints, security restrictions, or browser-specific issues.');
    cachedResult = false;
    return cachedResult;
  }
  video.src = `data:video/mp4;base64,${BASE64_VIDEO}`;
  video.autoplay = false;
  video.muted = false;
  video.playsInline = true;
  video.volume = 0.0001;

  try {
    await Promise.race([
      new Promise((resolve) => video.addEventListener('canplaythrough', resolve, { once: true })),
      new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout waiting for video to be ready')), 2000)),
    ]);

    await video.play();

    cachedResult = true;
  } catch {
    cachedResult = false;
  } finally {
    video.remove();
    video.src = '';
  }

  return cachedResult;
}